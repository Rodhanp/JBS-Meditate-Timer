{"version":3,"sources":["StyledProgressbar.js","playSound.js","StyledSlider.js","App.js","serviceWorker.js","index.js"],"names":["StyledProgressbar","props","percentage","text","strokeWidth","styles","root","path","stroke","strokeLinecap","transition","trail","fill","fontSize","SoundComponent","handleSongPlaying","bind","state","position","loopCount","duration","this","setState","pos","timer","document","querySelector","min","Math","floor","sec","slice","innerHTML","funcPerc","console","log","desiredT","url","playStatus","onPlaying","onFinishedPlaying","onStop","volume","Component","StyledSlider","style","height","padding","handleStyle","display","railStyle","margin","borderRadius","backgroundColor","opacity","trackStyle","playButton","pauseButton","rainAudio","loudVolumeIcon","quietVolumeIcon","noVolumeIcon","rainImg","App","volumeChange","value","mute","volumeIcon","pbuttonUrl","audioStatus","Sound","status","STOPPED","timeValues","audioNames","seekCurrentPosition","audioUrl","bgImg","desiredTime","timeHovered","audioHovered","x","PLAYING","PAUSED","name","JSON","stringify","audioName","replace","timeBtnClass","timeOptions","map","onMouseEnter","handleTimeHover","onMouseLeave","className","onClick","timeSelect","audioOptions","handleAudioHover","toLowerCase","audioSelect","backgroundImage","src","alt","e","playPause","toggleMute","id","onChange","step","max","moveSeek","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4118fd77.chunk.js","sourcesContent":["import React from 'react';\r\nimport CircularProgressbar from 'react-circular-progressbar';\r\n\r\nfunction StyledProgressbar(props) {\r\n  return (\r\n    <CircularProgressbar\r\n      percentage={props.percentage}\r\n      text={props.text}\r\n      // Path width must be customized with strokeWidth,\r\n      // since it informs dimension calculations.\r\n      strokeWidth={3}\r\n      // You can override styles either by specifying this \"styles\" prop,\r\n      // or by overriding the default CSS here:\r\n      // https://github.com/iqnivek/react-circular-progressbar/blob/master/src/styles.css\r\n      styles={{\r\n        // Customize the root svg element\r\n        root: {},\r\n        // Customize the path, i.e. the part that's \"complete\"\r\n        path: {\r\n          // Tweak path color:\r\n          stroke: '#0086ffcc',\r\n          // Tweak path to use flat or rounded ends:\r\n          strokeLinecap: 'butt',\r\n          // Tweak transition animation:\r\n          transition: 'stroke-dashoffset 0.5s ease 0s',\r\n        },\r\n        // Customize the circle behind the path\r\n        trail: {\r\n          // Tweak the trail color:\r\n          stroke: '#ffffffcc',\r\n        },\r\n        // Customize the text\r\n        text: {\r\n          // Tweak text color:\r\n          fill: '#f88',\r\n          // Tweak text size:\r\n          fontSize: '30px',\r\n        },\r\n      }}\r\n    />\r\n  );\r\n}\r\nexport default StyledProgressbar;\r\n","import React, { Component } from 'react'\r\nimport Sound from 'react-sound'\r\n\r\nclass SoundComponent extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.handleSongPlaying = this.handleSongPlaying.bind(this)\r\n    this.state = {\r\n      position: 0,\r\n      loopCount: 0,\r\n    }\r\n  }\r\n\r\n  handleSongPlaying({ position, duration }) {\r\n    this.setState({ position })\r\n\r\n    var pos = position + this.state.loopCount * duration //loopCount to multiply for duration\r\n    const timer = document.querySelector('.timer')\r\n    var min = Math.floor(pos / (1000 * 60))\r\n    var sec = Math.floor((pos / 1000) % 60)\r\n\r\n    min = ('0' + min).slice(-2)\r\n    sec = ('0' + sec).slice(-2)\r\n\r\n    timer.innerHTML = `${min} : ${sec}`\r\n    this.props.funcPerc(pos / 1000)\r\n\r\n    console.log(Math.floor(pos / 1000) + ', ' + this.props.desiredT)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Sound\r\n        url={this.props.url}\r\n        playStatus={this.props.playStatus}\r\n        onPlaying={this.handleSongPlaying}\r\n        onFinishedPlaying={() =>\r\n          this.setState({ loopCount: this.state.loopCount + 1, position: 0 })\r\n        }\r\n        onStop={() => this.setState({ loopCount: 0, position: 0 })}\r\n        position={this.state.position}\r\n        volume={this.props.volume}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default SoundComponent\r\n","import React from 'react'\r\nimport Slider from 'rc-slider'\r\nimport 'rc-slider/assets/index.css';\r\n\r\nfunction StyledSlider (props) {\r\n    // Overall style\r\n    const style  = { height: 20, padding: 0 }\r\n    // The style used for handle. \r\n    const handleStyle = { display: \"none\" }\r\n    // The style used for the track base color.\r\n    const railStyle = { margin: 0, borderRadius: 0, height: 20, backgroundColor: '#ffffff', opacity: .2 }\r\n    // The style used for track\r\n    const trackStyle = { borderRadius: 0, height: 20, backgroundColor: '#ffffff' }\r\n    return (\r\n        <Slider\r\n            style={style}\r\n            handleStyle={handleStyle}\r\n            railStyle={railStyle}\r\n            trackStyle={trackStyle}\r\n            {...props} />\r\n    )\r\n}\r\n\r\nexport default StyledSlider\r\n","import React, { Component } from 'react'\r\n// import logo from './logo.svg';\r\nimport StyledProgressbar from './StyledProgressbar'\r\nimport Sound from 'react-sound'\r\nimport SoundComponent from './playSound'\r\nimport StyledSlider from './StyledSlider';\r\nimport 'react-circular-progressbar/dist/styles.css'\r\nimport './App.css'\r\n\r\nconst playButton = 'svg/play.svg'\r\nconst pauseButton = 'svg/pause.svg'\r\n\r\nconst rainAudio = 'audio/med_wm.mp3'\r\nconst forestAudio = 'audio/med_wom.mp3'\r\nconst samarpanAudio = 'audio/aarti.mp3'\r\nconst streamAudio = 'audio/om_namo.mp3'\r\nconst wavesAudio = 'audio/swami_namo.mp3'\r\n\r\nconst loudVolumeIcon = \"svg/volume-2.svg\";\r\nconst quietVolumeIcon = \"svg/volume-1.svg\";\r\nconst noVolumeIcon = \"svg/volume-x.svg\";\r\n\r\nconst rainImg = 'img/med_wm.jpg'\r\nconst forestImg = 'img/med_wom.jpg'\r\nconst aartiImg = 'img/img_aarti.jpg'\r\nconst streamImg = 'img/om_namo.jpg'\r\nconst wavesImg = 'img/swami_namo.jpg'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      pbuttonUrl          : playButton,\r\n      audioStatus         : Sound.status.STOPPED,\r\n      timeValues          : [900,1800,2700,],\r\n      audioNames          : [\"Meditation with Music\", \"Meditation without Music\", \"Aarti\", \"Om Swami Namo Namah Dhun\", \"Shivakrupanand Swami Dhun\"],\r\n      seekCurrentPosition : 0,\r\n      audioUrl            : rainAudio,      // Default\r\n      bgImg               : rainImg,\r\n      desiredTime         : 1950,            // Default\r\n      timeHovered         : false,\r\n      audioHovered        : false,\r\n      volume              : 100,            // Default\r\n      mute                : false,          // Default\r\n      volumeIcon          : loudVolumeIcon,\r\n\r\n    }\r\n  }\r\n\r\n  timeSelect(x) {\r\n    this.setState({\r\n      desiredTime: x.duration,\r\n    })\r\n  }\r\n\r\n  playPause() {\r\n    console.log('plaPayse')\r\n    if (this.state.pbuttonUrl === playButton) {\r\n      this.setState({\r\n        pbuttonUrl: pauseButton,\r\n        audioStatus: Sound.status.PLAYING,\r\n      })\r\n    } else if (this.state.pbuttonUrl === pauseButton) {\r\n      this.setState({\r\n        pbuttonUrl: playButton,\r\n        audioStatus: Sound.status.PAUSED,\r\n      })\r\n    }\r\n  }\r\n\r\n  audioSelect(name) {\r\n    var x = JSON.stringify(name.audioName).replace(/[\"]+/g, '')\r\n\r\n    if (x === this.state.audioNames[1]) {\r\n      this.setState({\r\n        audioUrl: forestAudio,\r\n        bgImg: forestImg,\r\n      })\r\n    } else if (x === this.state.audioNames[2]) {\r\n      this.setState({\r\n        audioUrl: samarpanAudio,\r\n        bgImg: aartiImg,\r\n      })\r\n    } else if (x === this.state.audioNames[3]) {\r\n      this.setState({\r\n        audioUrl: streamAudio,\r\n        bgImg: streamImg,\r\n      })\r\n    } else if (x === this.state.audioNames[4]) {\r\n      this.setState({\r\n        audioUrl: wavesAudio,\r\n        bgImg: wavesImg,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        audioUrl: rainAudio,\r\n        bgImg: rainImg,\r\n      })\r\n    }\r\n  }\r\n\r\n  moveSeek(pos) {\r\n    this.setState({ seekCurrentPosition: (pos / this.state.desiredTime) * 100 })\r\n\r\n    if (Math.floor(pos) === this.state.desiredTime) {\r\n      this.setState({\r\n        pbuttonUrl: playButton,\r\n        audioStatus: Sound.status.STOPPED,\r\n      })\r\n    }\r\n  }\r\n\r\n  handleTimeHover() {\r\n    this.setState({\r\n      timeHovered: !this.state.timeHovered\r\n    });\r\n  }\r\n\r\n  handleAudioHover() {\r\n    this.setState({\r\n      audioHovered: !this.state.audioHovered\r\n    });\r\n  }\r\n\r\n  volumeChange = (value) => {\r\n    this.setState({\r\n      volume: this.state.mute ? this.state.volume : value,\r\n      volumeIcon: this.state.mute || value === 0 ? noVolumeIcon : value <= 50 ? quietVolumeIcon : loudVolumeIcon\r\n    });\r\n  }\r\n\r\n  toggleMute() {\r\n    this.setState({\r\n      volumeIcon: !this.state.mute ? noVolumeIcon : this.state.volume <= 50 ? quietVolumeIcon : loudVolumeIcon,\r\n      mute: !this.state.mute,\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    console.log(this.state.timeBtnClass);\r\n    const timeOptions = this.state.timeValues.map((duration) =>\r\n      <button key={duration} onMouseEnter={this.handleTimeHover.bind(this)} onMouseLeave={this.handleTimeHover.bind(this)} className={ !this.state.timeHovered && duration === this.state.desiredTime \r\n                                          ? \"active\" : \"\" } onClick={ () => {this.timeSelect({duration})} }>{duration/60} Minutes</button>\r\n    );\r\n\r\n    const audioOptions = this.state.audioNames.map((audioName) =>\r\n      <button key={audioName} onMouseEnter={this.handleAudioHover.bind(this)} onMouseLeave={this.handleAudioHover.bind(this)} className={ !this.state.audioHovered && this.state.audioUrl === \"audio/\" + audioName.toLowerCase() + \".mp3\" \r\n                                          ? \"active\" : \"\" } onClick={ () => {this.audioSelect({audioName})} }>{audioName}</button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"bg-overlay\"></div>\r\n        <div className=\"bg\" style={{ backgroundImage: `url(${this.state.bgImg})` }} />\r\n        <div className=\"time-menu\">{timeOptions}</div>\r\n        <div className=\"player-container\">\r\n          <img className=\"playPause\" src={this.state.pbuttonUrl} alt=\"Play\" onClick={(e) => { this.playPause() }} />\r\n\r\n          <div className=\"volume-control\">\r\n            <img onClick={this.toggleMute.bind(this)} className=\"volume-icon\" src={this.state.volumeIcon} alt=\"\" />\r\n            &nbsp;\r\n            <div className=\"volume-slider\">\r\n              <StyledSlider id='slider'  onChange={this.volumeChange} step={1} min={0} max={100} value={this.state.mute ? 0 : this.state.volume} />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"audioSeek\">\r\n            <StyledProgressbar id='seek' percentage={this.state.seekCurrentPosition} />\r\n          </div>\r\n\r\n          <SoundComponent playStatus={this.state.audioStatus} url={this.state.audioUrl} funcPerc={this.moveSeek.bind(this)} desiredT={this.state.desiredTime} volume={this.state.mute ? 0 : this.state.volume} />\r\n          <div className=\"timer\">00 : 00</div>\r\n        </div>\r\n\r\n        <div className=\"audio-menu\">\r\n          {audioOptions}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}